{
  "stats": {
    "suites": 2,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-30T09:15:14.383Z",
    "end": "2024-05-30T09:15:15.843Z",
    "duration": 1460,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e0e1f0b4-a73d-46ef-ac93-293576bc68c1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "mockDatabase = JSON.parse(JSON.stringify(originalMockDatabase));\nlogic.setMockData(mockDatabase);",
          "err": {},
          "uuid": "b2751795-4270-4d52-a77f-4c9410dd3405",
          "parentUUID": "e0e1f0b4-a73d-46ef-ac93-293576bc68c1",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ec81df03-f193-4f62-8040-081c975fb0a9",
          "title": "Logic Functions",
          "fullFile": "C:\\Users\\Humayun\\Documents\\GitHub\\QAFullStackProject\\__tests__\\integration\\integration.test.js",
          "file": "\\__tests__\\integration\\integration.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Logic Functions\"",
              "fullTitle": "Logic Functions \"after each\" hook in \"Logic Functions\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "dd975a0d-b6b1-4a51-8755-2107eee0459c",
              "parentUUID": "ec81df03-f193-4f62-8040-081c975fb0a9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all users when getAllUsers is called",
              "fullTitle": "Logic Functions should return all users when getAllUsers is called",
              "timedOut": false,
              "duration": 452,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUsers = [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }];\nconst queryStub = sinon.stub(database, 'query').callsFake((query, callback) => {\n  callback(null, mockUsers);\n});\nrequest(app)\n  .get('/users')\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body).to.deep.equal(mockUsers);\n    queryStub.restore(); \n    done();\n  });",
              "err": {},
              "uuid": "aa58ec02-6d34-4aed-b117-81f08952548d",
              "parentUUID": "ec81df03-f193-4f62-8040-081c975fb0a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a user by ID if user exists when getUserById is called",
              "fullTitle": "Logic Functions should return a user by ID if user exists when getUserById is called",
              "timedOut": false,
              "duration": 111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: 1, name: 'John Doe' };\nconst queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n  callback(null, [mockUser]);\n});\nrequest(app)\n  .get('/users/1')\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body).to.deep.equal(mockUser);\n    queryStub.restore(); \n    done();\n  });",
              "err": {},
              "uuid": "1be0c74e-3311-4a60-9c8b-637da46d4f3c",
              "parentUUID": "ec81df03-f193-4f62-8040-081c975fb0a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if user does not exist when getUserById is called",
              "fullTitle": "Logic Functions should return 404 if user does not exist when getUserById is called",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n      callback(null, []);\n    });\n    request(app)\n      .get('/users/1')\n      .expect(404, done);",
              "err": {},
              "uuid": "7b975a16-b2d7-48cc-ab43-82e3258f5f32",
              "parentUUID": "ec81df03-f193-4f62-8040-081c975fb0a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user when createUser is called",
              "fullTitle": "Logic Functions should create a new user when createUser is called",
              "timedOut": false,
              "duration": 242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n      callback(null, { insertId: 1 });\n    });\n    request(app)\n      .post('/users')\n      .send({ name: 'John Doe', nickname: 'johnd', age: 30, bio: 'A bio' })\n      .expect(302, done);",
              "err": {},
              "uuid": "31781bfe-9c06-41d6-92e8-163e031519d9",
              "parentUUID": "ec81df03-f193-4f62-8040-081c975fb0a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by ID if user exists when deleteUser is called",
              "fullTitle": "Logic Functions should delete a user by ID if user exists when deleteUser is called",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 1;\nconst queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n  callback(null, { affectedRows: 1 });\n});\nrequest(app)\n  .delete(`/users/${userId}`)\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.status).to.equal(200);\n    queryStub.restore(); \n    done();\n  });",
              "err": {},
              "uuid": "60c6ec9f-e929-40b1-ad5f-57322fcc3225",
              "parentUUID": "ec81df03-f193-4f62-8040-081c975fb0a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa58ec02-6d34-4aed-b117-81f08952548d",
            "1be0c74e-3311-4a60-9c8b-637da46d4f3c",
            "7b975a16-b2d7-48cc-ab43-82e3258f5f32",
            "31781bfe-9c06-41d6-92e8-163e031519d9",
            "60c6ec9f-e929-40b1-ad5f-57322fcc3225"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 948,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "70fba9be-07ac-4603-aefe-6bff3d5d6677",
          "title": "Logic Functions",
          "fullFile": "C:\\Users\\Humayun\\Documents\\GitHub\\QAFullStackProject\\__tests__\\unit\\unit.test.js",
          "file": "\\__tests__\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getAllUsers should return all users",
              "fullTitle": "Logic Functions getAllUsers should return all users",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = logic.getAllUsers();\nexpect(users).to.deep.equal(mockDatabase.users);",
              "err": {},
              "uuid": "439d974e-0b5d-4f08-8899-9975c3937f25",
              "parentUUID": "70fba9be-07ac-4603-aefe-6bff3d5d6677",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserByName should return a user by name if user exists",
              "fullTitle": "Logic Functions getUserByName should return a user by name if user exists",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userName = 'John Doe';\nconst user = mockDatabase.users.find(u => u.name === userName);\nconst result = logic.getUserByName(userName);\nexpect(result).to.deep.equal(user);",
              "err": {},
              "uuid": "a5e56eb2-a3e9-48a0-b1a4-e46a87e48e47",
              "parentUUID": "70fba9be-07ac-4603-aefe-6bff3d5d6677",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserByName should return null if user does not exist",
              "fullTitle": "Logic Functions getUserByName should return null if user does not exist",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userName = 'Nonexistent User';\nconst result = logic.getUserByName(userName);\nexpect(result).to.be.null;",
              "err": {},
              "uuid": "3267848a-04dc-4f93-ac38-2d120ff0f248",
              "parentUUID": "70fba9be-07ac-4603-aefe-6bff3d5d6677",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "createUser should add a new user",
              "fullTitle": "Logic Functions createUser should add a new user",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = { name: 'Alice Doe', nickname: 'aliced', age: 25, bio: 'Lorem ipsum...' };\nconst createdUser = logic.createUser(newUser);\nconst users = logic.getAllUsers();\nexpect(users).to.deep.include(createdUser);",
              "err": {},
              "uuid": "e21e934c-463c-4fc0-8b70-ca7f39f546ee",
              "parentUUID": "70fba9be-07ac-4603-aefe-6bff3d5d6677",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updateUserByName should update an existing user",
              "fullTitle": "Logic Functions updateUserByName should update an existing user",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userName = 'John Doe';\nconst updatedInfo = { age: 35 };\nlogic.updateUserByName(userName, updatedInfo);\nconst updatedUser = logic.getUserByName(userName);\nexpect(updatedUser.age).to.equal(updatedInfo.age);",
              "err": {},
              "uuid": "8f8fcd8e-be14-499c-adc2-16c0b504773b",
              "parentUUID": "70fba9be-07ac-4603-aefe-6bff3d5d6677",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteUserByName should delete an existing user",
              "fullTitle": "Logic Functions deleteUserByName should delete an existing user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userName = 'John Doe';\nconst deletedUser = logic.deleteUserByName(userName);\nconst users = logic.getAllUsers();\nexpect(deletedUser).to.exist;\nexpect(users.find(u => u.name === userName)).to.not.exist;",
              "err": {},
              "uuid": "e62a04bf-7150-4b24-979f-6ed3d8cb5c31",
              "parentUUID": "70fba9be-07ac-4603-aefe-6bff3d5d6677",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "439d974e-0b5d-4f08-8899-9975c3937f25",
            "a5e56eb2-a3e9-48a0-b1a4-e46a87e48e47",
            "3267848a-04dc-4f93-ac38-2d120ff0f248",
            "e21e934c-463c-4fc0-8b70-ca7f39f546ee",
            "8f8fcd8e-be14-499c-adc2-16c0b504773b",
            "e62a04bf-7150-4b24-979f-6ed3d8cb5c31"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}