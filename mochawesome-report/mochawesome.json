{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-28T13:53:56.291Z",
    "end": "2024-05-28T13:53:56.348Z",
    "duration": 57,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7e8d811c-1fa3-474b-8ca3-012010424368",
      "title": "",
      "fullFile": "C:\\Users\\Admin\\OneDrive\\Desktop\\public\\QAFullStackProject\\__tests__\\unit\\unit.test.js",
      "file": "\\__tests__\\unit\\unit.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d92d525e-9ff3-42bf-8f52-ec4f7e1cb26a",
          "title": "Logic Functions",
          "fullFile": "C:\\Users\\Admin\\OneDrive\\Desktop\\public\\QAFullStackProject\\__tests__\\unit\\unit.test.js",
          "file": "\\__tests__\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Logic Functions\"",
              "fullTitle": "Logic Functions \"after each\" hook in \"Logic Functions\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore(); // Restore mocked functions after each test",
              "err": {},
              "uuid": "c0b30c95-ecf7-4872-ae81-d5fe5e893510",
              "parentUUID": "d92d525e-9ff3-42bf-8f52-ec4f7e1cb26a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all users when getAllUsers is called",
              "fullTitle": "Logic Functions should return all users when getAllUsers is called",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUsers = [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }];\nconst req = httpMocks.createRequest();\nconst res = httpMocks.createResponse();\n// Mock database query function\nconst queryStub = sinon.stub(database, 'query').callsFake((query, callback) => {\n  callback(null, mockUsers);\n});\n// Test the logic function\nlogic.getAllUsers(req, res);\nexpect(res.statusCode).to.equal(200);\nexpect(res._getJSONData()).to.deep.equal(mockUsers);\nqueryStub.restore(); // Restore the stub after the test",
              "err": {},
              "uuid": "ddf2eff7-f601-4556-9f63-271883f3becb",
              "parentUUID": "d92d525e-9ff3-42bf-8f52-ec4f7e1cb26a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a user by ID if user exists when getUserById is called",
              "fullTitle": "Logic Functions should return a user by ID if user exists when getUserById is called",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: 1, name: 'John Doe' };\nconst req = httpMocks.createRequest({ params: { id: 1 } });\nconst res = httpMocks.createResponse();\n// Mock database query function\nconst queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n  callback(null, [mockUser]);\n});\n// Test the logic function\nlogic.getUserById(req, res);\nexpect(res.statusCode).to.equal(200);\nexpect(res._getJSONData()).to.deep.equal(mockUser);\nqueryStub.restore(); // Restore the stub after the test",
              "err": {},
              "uuid": "326e4d93-cfaf-4b9a-b08d-2addda9c124d",
              "parentUUID": "d92d525e-9ff3-42bf-8f52-ec4f7e1cb26a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if user does not exist when getUserById is called",
              "fullTitle": "Logic Functions should return 404 if user does not exist when getUserById is called",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = httpMocks.createRequest({ params: { id: 1 } });\nconst res = httpMocks.createResponse();\n// Mock database query function\nconst queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n  callback(null, []);\n});\n// Test the logic function\nlogic.getUserById(req, res);\nexpect(res.statusCode).to.equal(404);\nqueryStub.restore(); // Restore the stub after the test",
              "err": {},
              "uuid": "84ed40a4-e6ef-471f-b0af-a2030eb10972",
              "parentUUID": "d92d525e-9ff3-42bf-8f52-ec4f7e1cb26a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should render the create user form when createUserForm is called",
              "fullTitle": "Logic Functions should render the create user form when createUserForm is called",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = httpMocks.createRequest();\nconst res = httpMocks.createResponse();\n// Test the logic function\nlogic.createUserForm(req, res);\nexpect(res.statusCode).to.equal(200);\nexpect(res._getData()).to.contain('<h1>Create User</h1>');\nexpect(res._getData()).to.contain('<form id=\"createUserForm\">');\nexpect(res._getData()).to.contain('<button type=\"submit\">Create</button>');",
              "err": {},
              "uuid": "88e1a981-7b97-456a-95c3-6bd9734012fb",
              "parentUUID": "d92d525e-9ff3-42bf-8f52-ec4f7e1cb26a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user when createUser is called",
              "fullTitle": "Logic Functions should create a new user when createUser is called",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = httpMocks.createRequest({\n  body: { name: 'John Doe', nickname: 'johnd', age: 30, bio: 'A bio' }\n});\nconst res = httpMocks.createResponse();\n// Mock database query function\nconst queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n  callback(null, { insertId: 1 });\n});\n// Test the logic function\nlogic.createUser(req, res);\nexpect(res.statusCode).to.equal(302); // Redirect status\nqueryStub.restore(); // Restore the stub after the test",
              "err": {},
              "uuid": "5e81e7ac-d4ea-4d54-bc34-905f7abd0880",
              "parentUUID": "d92d525e-9ff3-42bf-8f52-ec4f7e1cb26a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ddf2eff7-f601-4556-9f63-271883f3becb",
            "326e4d93-cfaf-4b9a-b08d-2addda9c124d",
            "84ed40a4-e6ef-471f-b0af-a2030eb10972",
            "88e1a981-7b97-456a-95c3-6bd9734012fb",
            "5e81e7ac-d4ea-4d54-bc34-905f7abd0880"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}