{
  "stats": {
    "suites": 3,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-03T13:00:35.128Z",
    "end": "2024-06-03T13:01:28.994Z",
    "duration": 53866,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3696a871-0c10-43f8-9b2a-3a6f52691a6b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook in \"{root}\"",
          "fullTitle": "\"before each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "mockDatabase = JSON.parse(JSON.stringify(originalMockDatabase));\nlogic.setMockData(mockDatabase);",
          "err": {},
          "uuid": "e2adc60b-2be4-46cb-9e47-a0cf2c7ed8fd",
          "parentUUID": "3696a871-0c10-43f8-9b2a-3a6f52691a6b",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8e5dc92d-4739-4d7d-9c7c-23c6b91a3040",
          "title": "User Application Tests",
          "fullFile": "C:\\Users\\Admin\\OneDrive\\Desktop\\public\\QAFullStackProject\\__tests__\\e2e\\end2end.test.js",
          "file": "\\__tests__\\e2e\\end2end.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"User Application Tests\"",
              "fullTitle": "User Application Tests \"before each\" hook in \"User Application Tests\"",
              "timedOut": false,
              "duration": 4841,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver = await new Builder().forBrowser('firefox').build();\nawait driver.manage().setTimeouts({ implicit: 10000 }); // Set implicit wait for 10 seconds",
              "err": {},
              "uuid": "ef0e1484-ee92-4cbc-b5e6-6ca8317cfd8d",
              "parentUUID": "8e5dc92d-4739-4d7d-9c7c-23c6b91a3040",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"User Application Tests\"",
              "fullTitle": "User Application Tests \"after each\" hook in \"User Application Tests\"",
              "timedOut": false,
              "duration": 6321,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (driver) {\n  await driver.quit();\n  await new Promise(resolve => setTimeout(resolve, 5000)); // Wait for 5 seconds\n}",
              "err": {},
              "uuid": "f0a0fa4f-14f5-4f6c-a2d9-0654c1a0ffc2",
              "parentUUID": "8e5dc92d-4739-4d7d-9c7c-23c6b91a3040",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should list existing users",
              "fullTitle": "User Application Tests should list existing users",
              "timedOut": false,
              "duration": 488,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000/'); // Replace with your server address\nconst userList = await driver.findElement(By.id('userList'));\nconst users = await userList.findElements(By.tagName('li'));\nassert(users.length > 0, 'User list should not be empty');\nconst firstUserLink = await users[0].findElement(By.tagName('a'));\nawait firstUserLink.click();",
              "err": {},
              "uuid": "5d1d3710-4fc0-42b9-9ff0-56a3d2885334",
              "parentUUID": "8e5dc92d-4739-4d7d-9c7c-23c6b91a3040",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user",
              "fullTitle": "User Application Tests should create a new user",
              "timedOut": false,
              "duration": 2924,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000/create.html');\nconst nameField = await driver.findElement(By.id('name'));\nconst nicknameField = await driver.findElement(By.id('nickname'));\nconst ageField = await driver.findElement(By.id('age'));\nconst bioField = await driver.findElement(By.id('bio'));\nconst submitButton = await driver.findElement(By.id('submit'));\nawait nameField.sendKeys('Test User');\nawait nicknameField.sendKeys('test_user');\nawait ageField.sendKeys(25);\nawait bioField.sendKeys('This is a test user bio.');\nawait submitButton.click();\nawait driver.sleep(2000); // Adjust wait time as needed\nawait driver.get('http://localhost:3000/');\nconst updatedUserList = await driver.findElement(By.id('userList'));\nconst updatedUsers = await updatedUserList.findElements(By.tagName('li'));\nlet found = false;\nfor (const user of updatedUsers) {\n  const userLink = await user.findElement(By.tagName('a'));\n  const userLinkText = await userLink.getText();\n  if (userLinkText.includes('Test User (test_user)')) {\n    found = true;\n    break;\n  }\n}\nassert(found, 'Newly created user not found in the list');",
              "err": {},
              "uuid": "a6cd35bc-2dc8-4cd5-9fbe-14593c16384e",
              "parentUUID": "8e5dc92d-4739-4d7d-9c7c-23c6b91a3040",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should edit an existing user",
              "fullTitle": "User Application Tests should edit an existing user",
              "timedOut": false,
              "duration": 2731,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000/');\nconst userList = await driver.findElement(By.id('userList'));\nconst users = await userList.findElements(By.tagName('li'));\nassert(users.length > 0, 'User list should not be empty');\nconst firstUserLink = await users[0].findElement(By.tagName('a'));\nawait firstUserLink.click();\nawait driver.wait(until.elementLocated(By.className('editBtn')), 20000); // Wait for the edit button\nconst editButton = await driver.findElement(By.className('editBtn'));\nawait editButton.click();\nconst nameField = await driver.findElement(By.id('name'));\nawait nameField.clear();\nawait nameField.sendKeys('Updated Test User');\nconst editSubmitButton = await driver.findElement(By.id('editButton'));\nawait editSubmitButton.click();\nawait driver.sleep(2000); // Adjust wait time as needed\nawait driver.get('http://localhost:3000/');\nconst updatedUserList = await driver.findElement(By.id('userList'));\nconst updatedUsers = await updatedUserList.findElements(By.tagName('li'));\nlet found = false;\nfor (const user of updatedUsers) {\n  const userLink = await user.findElement(By.tagName('a'));\n  const userLinkText = await userLink.getText();\n  if (userLinkText.includes('Updated Test User')) {\n    found = true;\n    break;\n  }\n}\nassert(found, 'Edited user not found in the list');",
              "err": {},
              "uuid": "23795411-0c7c-4c44-afa3-2d72d40eb9f1",
              "parentUUID": "8e5dc92d-4739-4d7d-9c7c-23c6b91a3040",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an existing user",
              "fullTitle": "User Application Tests should delete an existing user",
              "timedOut": false,
              "duration": 2533,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.get('http://localhost:3000/');\nconst userList = await driver.findElement(By.id('userList'));\nconst users = await userList.findElements(By.tagName('li'));\nassert(users.length > 0, 'User list should not be empty');\nconst deleteButtons = await driver.findElements(By.css('.deleteBtn'));\nif (deleteButtons.length > 0) {\n  // Click the first delete button found\n  await deleteButtons[0].click();\n} else {\n  console.error('Delete button not found');\n  throw new Error('Delete button not found');\n}\nawait driver.sleep(2000); // Adjust wait time as needed\nawait driver.get('http://localhost:3000/');\nconst updatedUserList = await driver.findElement(By.id('userList'));\nconst updatedUsers = await updatedUserList.findElements(By.tagName('li'));\nconst userCountAfterDelete = updatedUsers.length;\nassert(userCountAfterDelete < users.length, 'User was not deleted successfully');",
              "err": {},
              "uuid": "d6ed96b4-7959-405b-acda-79165d6e2596",
              "parentUUID": "8e5dc92d-4739-4d7d-9c7c-23c6b91a3040",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d1d3710-4fc0-42b9-9ff0-56a3d2885334",
            "a6cd35bc-2dc8-4cd5-9fbe-14593c16384e",
            "23795411-0c7c-4c44-afa3-2d72d40eb9f1",
            "d6ed96b4-7959-405b-acda-79165d6e2596"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8676,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "66b2bff8-fca3-4f23-b777-0f307125e421",
          "title": "Logic Functions",
          "fullFile": "C:\\Users\\Admin\\OneDrive\\Desktop\\public\\QAFullStackProject\\__tests__\\integration\\integration.test.js",
          "file": "\\__tests__\\integration\\integration.test.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Logic Functions\"",
              "fullTitle": "Logic Functions \"after each\" hook in \"Logic Functions\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "73871e28-2d68-4003-b8df-1f147c96f1e2",
              "parentUUID": "66b2bff8-fca3-4f23-b777-0f307125e421",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all users when getAllUsers is called",
              "fullTitle": "Logic Functions should return all users when getAllUsers is called",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUsers = [{ id: 1, name: 'John Doe' }, { id: 2, name: 'Jane Doe' }];\nconst queryStub = sinon.stub(database, 'query').callsFake((query, callback) => {\n  callback(null, mockUsers);\n});\nrequest(app)\n  .get('/users')\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body).to.deep.equal(mockUsers);\n    queryStub.restore(); \n    done();\n  });",
              "err": {},
              "uuid": "fcf3cee0-a96b-46a3-94e7-e4555f7a43da",
              "parentUUID": "66b2bff8-fca3-4f23-b777-0f307125e421",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a user by ID if user exists when getUserById is called",
              "fullTitle": "Logic Functions should return a user by ID if user exists when getUserById is called",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockUser = { id: 1, name: 'John Doe' };\nconst queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n  callback(null, [mockUser]);\n});\nrequest(app)\n  .get('/users/1')\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.body).to.deep.equal(mockUser);\n    queryStub.restore(); \n    done();\n  });",
              "err": {},
              "uuid": "1cfa24ca-a8be-4a81-a213-5b0b572b0aeb",
              "parentUUID": "66b2bff8-fca3-4f23-b777-0f307125e421",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 if user does not exist when getUserById is called",
              "fullTitle": "Logic Functions should return 404 if user does not exist when getUserById is called",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n      callback(null, []);\n    });\n    request(app)\n      .get('/users/1')\n      .expect(404, done);",
              "err": {},
              "uuid": "96838b09-2256-488d-aa79-0b8127023477",
              "parentUUID": "66b2bff8-fca3-4f23-b777-0f307125e421",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user when createUser is called",
              "fullTitle": "Logic Functions should create a new user when createUser is called",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n      callback(null, { insertId: 1 });\n    });\n    request(app)\n      .post('/users')\n      .send({ name: 'John Doe', nickname: 'johnd', age: 30, bio: 'A bio' })\n      .expect(302, done);",
              "err": {},
              "uuid": "5c597d78-93ac-406a-86db-e832785643c9",
              "parentUUID": "66b2bff8-fca3-4f23-b777-0f307125e421",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by ID if user exists when deleteUser is called",
              "fullTitle": "Logic Functions should delete a user by ID if user exists when deleteUser is called",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userId = 1;\nconst queryStub = sinon.stub(database, 'query').callsFake((query, values, callback) => {\n  callback(null, { affectedRows: 1 });\n});\nrequest(app)\n  .delete(`/users/${userId}`)\n  .expect(200)\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res.status).to.equal(200);\n    queryStub.restore(); \n    done();\n  });",
              "err": {},
              "uuid": "0bf0e219-1e51-4986-8fe3-9c9955e544e3",
              "parentUUID": "66b2bff8-fca3-4f23-b777-0f307125e421",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fcf3cee0-a96b-46a3-94e7-e4555f7a43da",
            "1cfa24ca-a8be-4a81-a213-5b0b572b0aeb",
            "96838b09-2256-488d-aa79-0b8127023477",
            "5c597d78-93ac-406a-86db-e832785643c9",
            "0bf0e219-1e51-4986-8fe3-9c9955e544e3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 100,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "949d0648-ce05-4546-9c46-c5ead2bcd97e",
          "title": "Logic Functions",
          "fullFile": "C:\\Users\\Admin\\OneDrive\\Desktop\\public\\QAFullStackProject\\__tests__\\unit\\unit.test.js",
          "file": "\\__tests__\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "getAllUsers should return all users",
              "fullTitle": "Logic Functions getAllUsers should return all users",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const users = logic.getAllUsers();\nexpect(users).to.deep.equal(mockDatabase.users);",
              "err": {},
              "uuid": "16c7fe8e-e0ef-4dee-88b7-a9208b113350",
              "parentUUID": "949d0648-ce05-4546-9c46-c5ead2bcd97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserByName should return a user by name if user exists",
              "fullTitle": "Logic Functions getUserByName should return a user by name if user exists",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userName = 'John Doe';\nconst user = mockDatabase.users.find(u => u.name === userName);\nconst result = logic.getUserByName(userName);\nexpect(result).to.deep.equal(user);",
              "err": {},
              "uuid": "eef52ba6-0e5d-4c6f-826f-e9525ccfd910",
              "parentUUID": "949d0648-ce05-4546-9c46-c5ead2bcd97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserByName should return null if user does not exist",
              "fullTitle": "Logic Functions getUserByName should return null if user does not exist",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userName = 'Nonexistent User';\nconst result = logic.getUserByName(userName);\nexpect(result).to.be.null;",
              "err": {},
              "uuid": "6e44216f-4768-4fa0-8eeb-f52162779802",
              "parentUUID": "949d0648-ce05-4546-9c46-c5ead2bcd97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "createUser should add a new user",
              "fullTitle": "Logic Functions createUser should add a new user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = { name: 'Alice Doe', nickname: 'aliced', age: 25, bio: 'Lorem ipsum...' };\nconst createdUser = logic.createUser(newUser);\nconst users = logic.getAllUsers();\nexpect(users).to.deep.include(createdUser);",
              "err": {},
              "uuid": "a9765774-54ca-4274-a744-cad44558b56e",
              "parentUUID": "949d0648-ce05-4546-9c46-c5ead2bcd97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "updateUserByName should update an existing user",
              "fullTitle": "Logic Functions updateUserByName should update an existing user",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userName = 'John Doe';\nconst updatedInfo = { age: 35 };\nlogic.updateUserByName(userName, updatedInfo);\nconst updatedUser = logic.getUserByName(userName);\nexpect(updatedUser.age).to.equal(updatedInfo.age);",
              "err": {},
              "uuid": "0d2b7034-8056-4b7f-8208-74bd89ee4a05",
              "parentUUID": "949d0648-ce05-4546-9c46-c5ead2bcd97e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deleteUserByName should delete an existing user",
              "fullTitle": "Logic Functions deleteUserByName should delete an existing user",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userName = 'John Doe';\nconst deletedUser = logic.deleteUserByName(userName);\nconst users = logic.getAllUsers();\nexpect(deletedUser).to.exist;\nexpect(users.find(u => u.name === userName)).to.not.exist;",
              "err": {},
              "uuid": "62f69ffa-cd5a-4218-a5ce-5f0546d66cc3",
              "parentUUID": "949d0648-ce05-4546-9c46-c5ead2bcd97e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16c7fe8e-e0ef-4dee-88b7-a9208b113350",
            "eef52ba6-0e5d-4c6f-826f-e9525ccfd910",
            "6e44216f-4768-4fa0-8eeb-f52162779802",
            "a9765774-54ca-4274-a744-cad44558b56e",
            "0d2b7034-8056-4b7f-8208-74bd89ee4a05",
            "62f69ffa-cd5a-4218-a5ce-5f0546d66cc3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}